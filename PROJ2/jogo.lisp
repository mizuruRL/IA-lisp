(defun main-menu ()
"Main menu function. Displays the welcome message and redirects to the game mode menu."
    (format t "~%~%~%~%~%~%~%~%~%")
    (format t "Welcome to the Dots and Boxes game!~%")
    (format t "Developed by: Andre Dias and Joao Caetano~%~%")
    (game-mode-menu)
)

(defun game-mode-menu ()
"Displays and handles game mode selection logic."
    (reset-vars nil)
    (format t "Pick the desired game mode: ~%")
    (format t "1 - You Vs AI~%")
    (format t "2 - Clash of bots (AI vs AI)~%~%")
    (format t ">")
    (let ((inp (read)))
        (cond ((eql inp 'quit) (cl-user::quit))
              ((or (not (numberp inp)) (> inp 2) (< inp 1)) (error-handle 'game-mode-menu "~%Error: Please input a valid option~%~%"))
              ((= inp 1) (human-bot-game (list (starting-board) 0 0)))
              ((= inp 2) (bot-bot-game (list (starting-board) 0 0)))
        )
    )
)

(defun bot-bot-game (state)
"Function that handles bot vs bot interaction. State is the current state of the game."
    (if (game-overp state)
        (end-game state)
        (let ((board (car state))
            (score-player-1 (second state))
            (score-player-2 (third state)))
                (format t "~%~%~%")
                (print-state state)
                (let ((play (play-cpu state 2 1 1)))
                    (cond ((null play) (error-handle 'bot-bot-game "Error: Bot had invalid play." state))
                            ((game-overp (car *optimal-play*)) (end-game (car *optimal-play*)))
                            (T (cpu-play-handle (car *optimal-play*) 'bot-bot-game))
                    )
                )
                
        )
    )
)

(defun human-bot-game (state)
"Function that handles human vs bot interaction. State is the current state of the game."
    (if (game-overp state)
        (end-game state)
        (let ((board (car state))
            (score-player-1 (second state))
            (score-player-2 (third state)))
                (format t "~%~%~%")
                (print-state state)
                (format t "~%Your turn~%")
                (let ((arc-type (get-input-arc))
                    (line (get-input-line))
                    (column (get-input-column)))
                    (let ((play (play-human state arc-type line column 1)))
                        (cond ((null play) (error-handle 'human-bot-game "Invalid play, check coordinates." state))
                              ((game-overp play) (end-game play))
                              (T (cpu-play-handle play 'human-bot-game))
                        )
                    )
                )
        )
    )
)

(defun cpu-play-handle (state game-mode)
"Handles the responding play to another play, given that play's state and game-mode. Game-mode function is called at the end to repeat the game cycle."
    (print-state state)
    (progn
        (play-cpu state 2 2)
        (funcall game-mode (car *optimal-play*))
    )
)

(defun get-input-line ()
"Function that handles user input for line selection."
    (format t "~%Pick line:~%")
    (format t ">")
    (let ((line (read)))
        (cond ((null line) (error-handle 'get-input-line "Error: No input.~%"))
            ((eql line 'quit) (cl-user::quit))
            ((not (numberp line)) (error-handle 'get-input-line "Error: Input not a number.~%"))
            ((or (< 6 line) (> 1 line)) (error-handle 'get-input-line "Error: Line out of board range.~%"))
            (t line)
        )
    )
)

(defun get-input-column ()
"Function that handles user input for column selection."
    (format t "~%Pick column:~%")
    (format t ">")
    (let ((column (read)))
        (cond ((null column) (error-handle 'get-input-column "Error: No input.~%"))
            ((eql column 'quit) (cl-user::quit))
            ((not (numberp column)) (error-handle 'get-input-column "Error: Input not a number.~%"))
            ((or  (< 7 column) (> 1 column)) (error-handle 'get-input-column "Error: Column out of board range.~%"))
            (t column)
        )
    )
)

(defun get-input-arc ()
"Function that handles user input for arc selection."
    (format t "~%Pick arc type (v - Vertical, h - Horizontal):~%")
    (format t ">")
    (let ((in (read)))
        (if (eql in 'quit)
            (cl-user::quit)
            (let ((arc-type (get-arc-fun in)))
                (cond ((null arc-type) (error-handle 'get-input-arc "~%Error: Invalid arc type. Please input a valid arc type.~%"))
                    (t arc-type)
                )
            )
        )
    )
)

(defun game-overp (state)
"Checks if a state has no more possible moves, therefore triggering a game over signal."
    (let ((hor-arcs (caar state))
        (ver-arcs (cadar state)))
        (and (no-more-moves hor-arcs) (no-more-moves ver-arcs))
    )
)

(defun end-game (state)
"Ends the game from a given state"
    (show-winner state)
    (print-state state)
)

(defun show-winner (state)
"Shows the winner for a given game state."
    (let ((player-1-score (second state))
    (player-2-score (third state)))
        (cond ((> player-1-score player-2-score) (format t "~%~%Player 1 won~%~%"))
              ((< player-1-score player-2-score) (format t "~%~%Player 2 won~%~%"))
              ((= player-1-score player-2-score) (format t "~%~%Draw~%~%")))
    )
)

(defun error-handle (menu message &optional arg)
"Error handling function used to print an error message. Menu is the menu function where the error ocurred. If menu requires an argument, it'll be specified in arg."
    (format t message)
    (if (null arg)
        (funcall menu)
        (funcall menu arg)
    )
)

(defun display-board (board)
"Returns a string with the BOARD built for the LISP CLI."
    (build-board (car board)(cadr board))
)

(defun build-board-horizontal-arc (line-list)
"Returns a string with all of the lines in LINE-LIST represented for the CLI."
    (cond ((null line-list) ".")
          ((not (numberp (car line-list))) nil)
          ((= (car line-list) 0) (concatenate 'string ".    " (build-board-horizontal-arc (cdr line-list))))
          ((= (car line-list) 1) (concatenate 'string ".----" (build-board-horizontal-arc (cdr line-list))))
          ((= (car line-list) 2) (concatenate 'string ".####" (build-board-horizontal-arc (cdr line-list))))
          (t nil)
    )
)

(defun build-board-vertical-arc (vertical-list)
"Returns a string with all of the columns in VERTICAL-LIST represented for the CLI."
     (cond ((null vertical-list) "")
          ((not (numberp (car vertical-list))) nil)
          ((= (car vertical-list) 0) (concatenate 'string "     " (build-board-vertical-arc (cdr vertical-list))))
          ((= (car vertical-list) 1) (concatenate 'string "|    " (build-board-vertical-arc (cdr vertical-list))))
          ((= (car vertical-list) 2) (concatenate 'string "#    " (build-board-vertical-arc (cdr vertical-list))))
          (t nil)
    )
)

(defun build-board (lines-list column-list)
"Returns a string with the visual representation for the CLI of the board, given LINES-LIST and COLUMN-LIST."
    (let ((vertical-list (mapcar #'car column-list))
          (next-column-list (mapcar #'cdr column-list)))
        (cond ((null lines-list) "")
              ((null lines-list) (concatenate 'string (build-board-vertical-arc vertical-list) '(#\NewLine) (build-board lines-list next-column-list)))
              (t (concatenate 'string (build-board-horizontal-arc (car lines-list)) '(#\NewLine) (build-board-vertical-arc vertical-list) '(#\NewLine) (build-board (cdr lines-list) next-column-list)))
        )
    )
)

(defun print-state (state)
"Outputs the game STATE to the CLI, paired with number of cut and explored nodes."
    (let ((board (display-board (car state)))
        (player-1-score (second state))
        (player-2-score (third state))
        (cut-nodes *cuts*)
        (explored-nodes *explored*)
        )
        (format t "Board: ~%~a~%" board)
        (format t "Player 1 score: ~a~%" player-1-score)
        (format t "Player 2 score: ~a~%" player-2-score)
        (format t "Node cuts: ~a~%" cut-nodes)
        (format t "Explored-nodes: ~a~%" explored-nodes)
        (output-results board player-1-score player-2-score cut-nodes explored-nodes)
    )
)

(defun output-results (board player-1-score player-2-score cut-nodes explored-nodes)
"Outputs the results of an alphabeta search to a file log.dat."
    (with-open-file (out "log.dat" :direction :output :if-exists :append :if-does-not-exist :create)
        (format out "Board: ~%~a~%" board)
        (format out "Player 1 score: ~a~%" player-1-score)
        (format out "Player 2 score: ~a~%" player-2-score)
        (format out "Node cuts: ~a~%" cut-nodes)
        (format out "Explored-nodes: ~a~%" explored-nodes)
        (format out "--------------------------------------------------------------------------------------~%")
    )
)

(defun start ()
"Program start function."
    (load (compile-file "puzzle.lisp"))
    (load (compile-file "algoritmo.lisp"))
    (load (compile-file "jogo.lisp"))
    (main-menu)
)