(defun main-menu ()
"Main menu function. Displays the welcome message and problem to pick."
    (format t "~%~%~%~%~%~%~%~%~%")
    (format t "Welcome to the Dots and Boxes game!~%")
    (format t "Developed by: Andre Dias and Joao Caetano~%~%")
    (game-mode-menu)
)

(defun game-mode-menu (&optional args)
    (format t "Pick the desired game mode: ~%")
    (format t "1 - You Vs AI~%")
    (format t "2 - Clash of bots (AI vs AI)~%~%")
    (format t ">")
    (let ((inp (read)))
        (cond ((or (not (numberp inp)) (> inp 2) (< inp 1)) (error-handle 'game-mode-menu "~%Error: Please input a valid option~%~%"))
              ((= 1) (human-bot-game (list (starting-board) 0 0) nil))
        )
    )
)

(defun human-bot-game (state game-overp)
    (if game-overp
        (end-game)
        (let ((board (car state))
            (score-player-1 (second state))
            (score-player-2 (third state)))
                (format t "~%~%~%~%~%~%~%~%~%")
                (format t "Board")
        )
    )
)

(defun end-game (state)
    (format t "Placeholder")
)

(defun error-handle (menu message &optional args)
    (format t message)
    (funcall menu args)
)

(defun display-board (board)
"Returns a string with the BOARD built for the LISP CLI."
    (build-board (car board)(cadr board))
)

(defun build-board-horizontal-arc (line-list)
"Returns a string with all of the lines in LINE-LIST represented for the CLI."
    (cond ((null line-list) ".")
          ((not (numberp (car line-list))) nil)
          ((= (car line-list) 0) (concatenate 'string ".    " (build-board-horizontal-arc (cdr line-list))))
          ((= (car line-list) 1) (concatenate 'string ".----" (build-board-horizontal-arc (cdr line-list))))
          ((= (car line-list) 2) (concatenate 'string ".####" (build-board-horizontal-arc (cdr line-list))))
          (t nil)
    )
)

(defun build-board-vertical-arc (vertical-list)
"Returns a string with all of the columns in VERTICAL-LIST represented for the CLI."
     (cond ((null vertical-list) "")
          ((not (numberp (car vertical-list))) nil)
          ((= (car vertical-list) 0) (concatenate 'string "     " (build-board-vertical-arc (cdr vertical-list))))
          ((= (car vertical-list) 1) (concatenate 'string "|    " (build-board-vertical-arc (cdr vertical-list))))
          ((= (car vertical-list) 2) (concatenate 'string "#    " (build-board-vertical-arc (cdr vertical-list))))
          (t nil)
    )
)

(defun build-board (lines-list column-list)
"Returns a string with the visual representation for the CLI of the board, given LINES-LIST and COLUMN-LIST."
    (let ((vertical-list (mapcar #'car column-list))
          (next-column-list (mapcar #'cdr column-list)))
        (cond ((null lines-list) "")
              ((null lines-list) (concatenate 'string (build-board-vertical-arc vertical-list) '(#\NewLine) (build-board lines-list next-column-list)))
              (t (concatenate 'string (build-board-horizontal-arc (car lines-list)) '(#\NewLine) (build-board-vertical-arc vertical-list) '(#\NewLine) (build-board (cdr lines-list) next-column-list)))
        )
    )
)

(defun print-state (state)
"Outputs the SOLUTION with used ALGORITHM to the CLI."
    (let ((board (display-board (car state)))
        (player-1-score (second state))
        (player-2-score (third state))
        (cut-nodes *cuts*)
        (explored-nodes *explored*)
        )
        (format t "Board: ~%~a~%" board)
        (format t "Player 1 score: ~a~%" player-1-score)
        (format t "Player 2 score: ~a~%" player-2-score)
        (format t "Node cuts: ~a~%" cut-nodes)
        (format t "Explored-nodes: ~a~%" explored-nodes)
        (output-results board player-1-score player-2-score cut-nodes explored-nodes)
    )
)

(defun output-results (board player-1-score player-2-score cut-nodes explored-nodes)
"Outputs the SOLUTION with used ALGORITHM to a file results.txt."
    (with-open-file (out "log.dat" :direction :output :if-exists :append :if-does-not-exist :create)
        (format out "Board: ~%~a~%" board)
        (format out "Player 1 score: ~a~%" player-1-score)
        (format out "Player 2 score: ~a~%" player-2-score)
        (format out "Node cuts: ~a~%" cut-nodes)
        (format out "Explored-nodes: a~%" explored-nodes)
        (format out "--------------------------------------------------------------------------------------~%")
    )
)

(defun load-files ()
    (load (compile-file "puzzle.lisp"))
    (load (compile-file "procura.lisp"))
)