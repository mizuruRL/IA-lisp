(defvar problems nil)

(defun load-problems (path-to-file)
    (setq problems (load-file path-to-file))
)

(defun load-file (path-to-file)
    (with-open-file (stream path-to-file)
        (loop for line = (read-line stream nil)
            while line
            collect (read-from-string line)
        )
    )
)

(defun print-problems ()
    (format t "~a" problems)
)

(defun test ()
    (load-problems "problemas.dat")
    (print-problems)
)

(defun display-board (board)
    (build-board (car board)(cadr board))
)

(defun build-board-horizontal-arc (line-list)
    (cond ((null line-list) ".")
          ((not (numberp (car line-list))) nil)
          ((= (car line-list) 0) (concatenate 'string ".    " (build-board-horizontal-arc (cdr line-list))))
          ((= (car line-list) 1) (concatenate 'string ".----" (build-board-horizontal-arc (cdr line-list))))
          (t nil)
    )
)

(defun build-board-vertical-arc (vertical-list)
     (cond ((null vertical-list) "")
          ((not (numberp (car vertical-list))) nil)
          ((= (car vertical-list) 0) (concatenate 'string "     " (build-board-vertical-arc (cdr vertical-list))))
          ((= (car vertical-list) 1) (concatenate 'string "|    " (build-board-vertical-arc (cdr vertical-list))))
          (t nil)
    )
)

(defun build-board (lines-list column-list)
    (let ((vertical-list (mapcar #'car column-list))
          (next-column-list (mapcar #'cdr column-list)))
        (cond ((null lines-list) "")
              ((null lines-list) (concatenate 'string (build-board-vertical-arc vertical-list) '(#\NewLine) (build-board lines-list next-column-list)))
              (t (concatenate 'string (build-board-horizontal-arc (car lines-list)) '(#\NewLine) (build-board-vertical-arc vertical-list) '(#\NewLine) (build-board (cdr lines-list) next-column-list)))
        )
    )
)